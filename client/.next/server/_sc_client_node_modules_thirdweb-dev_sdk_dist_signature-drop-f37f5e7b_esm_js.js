"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_sc_client_node_modules_thirdweb-dev_sdk_dist_signature-drop-f37f5e7b_esm_js";
exports.ids = ["_sc_client_node_modules_thirdweb-dev_sdk_dist_signature-drop-f37f5e7b_esm_js"];
exports.modules = {

/***/ "(sc_client)/../node_modules/@thirdweb-dev/sdk/dist/signature-drop-f37f5e7b.esm.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/@thirdweb-dev/sdk/dist/signature-drop-f37f5e7b.esm.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SignatureDrop\": () => (/* binding */ SignatureDrop)\n/* harmony export */ });\n/* harmony import */ var _QueryParams_7418efe8_esm_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./QueryParams-7418efe8.esm.js */ \"(sc_client)/../node_modules/@thirdweb-dev/sdk/dist/QueryParams-7418efe8.esm.js\");\n/* harmony import */ var _watchTransactions_f696b99b_esm_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./watchTransactions-f696b99b.esm.js */ \"(sc_client)/../node_modules/@thirdweb-dev/sdk/dist/watchTransactions-f696b99b.esm.js\");\n/* harmony import */ var _erc_721_standard_f0763dfa_esm_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./erc-721-standard-f0763dfa.esm.js */ \"(sc_client)/../node_modules/@thirdweb-dev/sdk/dist/erc-721-standard-f0763dfa.esm.js\");\n/* harmony import */ var _thirdweb_checkout_cf6aa4c1_esm_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./thirdweb-checkout-cf6aa4c1.esm.js */ \"(sc_client)/../node_modules/@thirdweb-dev/sdk/dist/thirdweb-checkout-cf6aa4c1.esm.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ethers */ \"(sc_client)/../node_modules/ethers/lib/index.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(ethers__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bn.js */ \"(sc_client)/../node_modules/bn.js/lib/bn.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bs58 */ \"(sc_client)/../node_modules/@thirdweb-dev/sdk/node_modules/bs58/index.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bs58__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cross-fetch */ \"(sc_client)/../node_modules/cross-fetch/dist/node-ponyfill.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! eventemitter3 */ \"(sc_client)/../node_modules/@thirdweb-dev/sdk/node_modules/eventemitter3/index.mjs\");\n/* harmony import */ var _thirdweb_dev_storage__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @thirdweb-dev/storage */ \"(sc_client)/../node_modules/@thirdweb-dev/storage/dist/thirdweb-dev-storage.esm.js\");\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tiny-invariant */ \"(sc_client)/../node_modules/tiny-invariant/dist/esm/tiny-invariant.js\");\n/* harmony import */ var merkletreejs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! merkletreejs */ \"(sc_client)/../node_modules/merkletreejs/dist/index.js\");\n/* harmony import */ var merkletreejs__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(merkletreejs__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! fast-deep-equal */ \"(sc_client)/../node_modules/fast-deep-equal/index.js\");\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal__WEBPACK_IMPORTED_MODULE_7__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Setup a collection of NFTs where when it comes to minting, you can authorize\n * some external party to mint tokens on your contract, and specify what exactly\n * will be minted by that external party..\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"signature-drop\");\n * ```\n *\n * @public\n */\nclass SignatureDrop extends _erc_721_standard_f0763dfa_esm_js__WEBPACK_IMPORTED_MODULE_8__.S {\n  /**\n   * @internal\n   */\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const claimCondition = {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   * };\n   * await contract.claimConditions.set([claimCondition]);\n   * ```\n   */\n\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   */\n\n  /**\n   * Signature Minting\n   * @remarks Generate dynamic NFTs with your own signature, and let others mint them using that signature.\n   * @example\n   * ```javascript\n   * // see how to craft a payload to sign in the `contract.signature.generate()` documentation\n   * const signedPayload = contract.signature.generate(payload);\n   *\n   * // now anyone can mint the NFT\n   * const tx = contract.signature.mint(signedPayload);\n   * const receipt = tx.receipt; // the mint transaction receipt\n   * const mintedId = tx.id; // the id of the NFT minted\n   * ```\n   */\n\n  /**\n   * Checkout\n   * @remarks Create a FIAT currency checkout for your NFT drop.\n   */\n\n  constructor(network, address, storage) {\n    let _options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new _watchTransactions_f696b99b_esm_js__WEBPACK_IMPORTED_MODULE_9__.dC(network, address, abi, _options);\n    super(contractWrapper, storage, chainId);\n    (0,_QueryParams_7418efe8_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, \"abi\", void 0);\n    (0,_QueryParams_7418efe8_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, \"owner\", void 0);\n    (0,_QueryParams_7418efe8_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, \"encoder\", void 0);\n    (0,_QueryParams_7418efe8_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, \"estimator\", void 0);\n    (0,_QueryParams_7418efe8_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, \"metadata\", void 0);\n    (0,_QueryParams_7418efe8_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, \"app\", void 0);\n    (0,_QueryParams_7418efe8_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, \"sales\", void 0);\n    (0,_QueryParams_7418efe8_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, \"platformFees\", void 0);\n    (0,_QueryParams_7418efe8_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, \"events\", void 0);\n    (0,_QueryParams_7418efe8_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, \"roles\", void 0);\n    (0,_QueryParams_7418efe8_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, \"interceptor\", void 0);\n    (0,_QueryParams_7418efe8_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, \"royalties\", void 0);\n    (0,_QueryParams_7418efe8_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, \"claimConditions\", void 0);\n    (0,_QueryParams_7418efe8_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, \"revealer\", void 0);\n    (0,_QueryParams_7418efe8_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, \"signature\", void 0);\n    (0,_QueryParams_7418efe8_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, \"checkout\", void 0);\n    /** ******************************\n     * WRITE FUNCTIONS\n     *******************************/\n    /**\n     * Create a batch of unique NFTs to be claimed in the future\n     *\n     * @remarks Create batch allows you to create a batch of many unique NFTs in one transaction.\n     *\n     * @example\n     * ```javascript\n     * // Custom metadata of the NFTs to create\n     * const metadatas = [{\n     *   name: \"Cool NFT\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n     * }, {\n     *   name: \"Cool NFT\",\n     *   description: \"This is a cool NFT\",\n     *   image: fs.readFileSync(\"path/to/image.png\"),\n     * }];\n     *\n     * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\n     * const firstTokenId = results[0].id; // token id of the first created NFT\n     * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n     * ```\n     *\n     * @param metadatas - The metadata to include in the batch.\n     * @param options - optional upload progress callback\n     */\n    (0,_QueryParams_7418efe8_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, \"createBatch\", (0,_watchTransactions_f696b99b_esm_js__WEBPACK_IMPORTED_MODULE_9__.du)(async (metadatas, options) => {\n      return this.erc721.lazyMint.prepare(metadatas, options);\n    }));\n    /**\n     * Claim unique NFTs to a specific Wallet\n     *\n     * @remarks Let the specified wallet claim NFTs.\n     *\n     * @example\n     * ```javascript\n     * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n     * const quantity = 1; // how many unique NFTs you want to claim\n     *\n     * const tx = await contract.claimTo(address, quantity);\n     * const receipt = tx.receipt; // the transaction receipt\n     * const claimedTokenId = tx.id; // the id of the NFT claimed\n     * const claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata\n     * ```\n     *\n     * @param destinationAddress - Address you want to send the token to\n     * @param quantity - Quantity of the tokens you want to claim\n     * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n     *\n     * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n     */\n    (0,_QueryParams_7418efe8_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, \"claimTo\", (0,_watchTransactions_f696b99b_esm_js__WEBPACK_IMPORTED_MODULE_9__.du)(async (destinationAddress, quantity, options) => {\n      return this.erc721.claimTo.prepare(destinationAddress, quantity, options);\n    }));\n    /**\n     * Claim NFTs to the connected wallet.\n     *\n     * @remarks See {@link NFTDrop.claimTo}\n     *\n     * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n     */\n    (0,_QueryParams_7418efe8_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, \"claim\", (0,_watchTransactions_f696b99b_esm_js__WEBPACK_IMPORTED_MODULE_9__.du)(async (quantity, options) => {\n      return this.erc721.claim.prepare(quantity, options);\n    }));\n    /**\n     * Burn a single NFT\n     * @param tokenId - the token Id to burn\n     * @example\n     * ```javascript\n     * const result = await contract.burnToken(tokenId);\n     * ```\n     */\n    (0,_QueryParams_7418efe8_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(this, \"burn\", (0,_watchTransactions_f696b99b_esm_js__WEBPACK_IMPORTED_MODULE_9__.du)(async tokenId => {\n      return this.erc721.burn.prepare(tokenId);\n    }));\n    this.abi = _watchTransactions_f696b99b_esm_js__WEBPACK_IMPORTED_MODULE_9__.e.parse(abi || []);\n    this.metadata = new _watchTransactions_f696b99b_esm_js__WEBPACK_IMPORTED_MODULE_9__.ai(this.contractWrapper, _watchTransactions_f696b99b_esm_js__WEBPACK_IMPORTED_MODULE_9__.dM, this.storage);\n    this.app = new _watchTransactions_f696b99b_esm_js__WEBPACK_IMPORTED_MODULE_9__.aW(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new _watchTransactions_f696b99b_esm_js__WEBPACK_IMPORTED_MODULE_9__.aj(this.contractWrapper, SignatureDrop.contractRoles);\n    this.royalties = new _watchTransactions_f696b99b_esm_js__WEBPACK_IMPORTED_MODULE_9__.ak(this.contractWrapper, this.metadata);\n    this.sales = new _watchTransactions_f696b99b_esm_js__WEBPACK_IMPORTED_MODULE_9__.al(this.contractWrapper);\n    this.encoder = new _watchTransactions_f696b99b_esm_js__WEBPACK_IMPORTED_MODULE_9__.ah(this.contractWrapper);\n    this.estimator = new _watchTransactions_f696b99b_esm_js__WEBPACK_IMPORTED_MODULE_9__.aO(this.contractWrapper);\n    this.events = new _watchTransactions_f696b99b_esm_js__WEBPACK_IMPORTED_MODULE_9__.aP(this.contractWrapper);\n    this.platformFees = new _watchTransactions_f696b99b_esm_js__WEBPACK_IMPORTED_MODULE_9__.aR(this.contractWrapper);\n    this.interceptor = new _watchTransactions_f696b99b_esm_js__WEBPACK_IMPORTED_MODULE_9__.aQ(this.contractWrapper);\n    this.claimConditions = new _watchTransactions_f696b99b_esm_js__WEBPACK_IMPORTED_MODULE_9__.an(this.contractWrapper, this.metadata, this.storage);\n    this.signature = new _watchTransactions_f696b99b_esm_js__WEBPACK_IMPORTED_MODULE_9__.ax(this.contractWrapper, this.storage);\n    this.revealer = new _watchTransactions_f696b99b_esm_js__WEBPACK_IMPORTED_MODULE_9__.am(this.contractWrapper, this.storage, _watchTransactions_f696b99b_esm_js__WEBPACK_IMPORTED_MODULE_9__.dN.name, () => this.erc721.nextTokenIdToMint());\n    this.signature = new _watchTransactions_f696b99b_esm_js__WEBPACK_IMPORTED_MODULE_9__.ax(this.contractWrapper, this.storage);\n    this.owner = new _watchTransactions_f696b99b_esm_js__WEBPACK_IMPORTED_MODULE_9__.aT(this.contractWrapper);\n    this.checkout = new _thirdweb_checkout_cf6aa4c1_esm_js__WEBPACK_IMPORTED_MODULE_11__.a(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total count NFTs in this drop contract, both claimed and unclaimed\n   */\n  async totalSupply() {\n    const claimed = await this.totalClaimedSupply();\n    const unclaimed = await this.totalUnclaimedSupply();\n    return claimed.add(unclaimed);\n  }\n\n  /**\n   * Get All Claimed NFTs\n   *\n   * @remarks Fetch all the NFTs (and their owners) that have been claimed in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTs = await contract.getAllClaimed();\n   * const firstOwner = claimedNFTs[0].owner;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata and their ownersfor all NFTs queried.\n   */\n  async getAllClaimed(queryParams) {\n    const start = ethers__WEBPACK_IMPORTED_MODULE_12__.BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = ethers__WEBPACK_IMPORTED_MODULE_12__.BigNumber.from(queryParams?.count || _QueryParams_7418efe8_esm_js__WEBPACK_IMPORTED_MODULE_10__.c).toNumber();\n    const maxId = Math.min((await this.totalClaimedSupply()).toNumber(), start + count);\n    return await Promise.all(Array.from(Array(maxId).keys()).map(i => this.get(i.toString())));\n  }\n\n  /**\n   * Get All Unclaimed NFTs\n   *\n   * @remarks Fetch all the NFTs that have been not been claimed yet in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTs = await contract.getAllUnclaimed();\n   * const firstUnclaimedNFT = unclaimedNFTs[0].name;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAllUnclaimed(queryParams) {\n    const start = ethers__WEBPACK_IMPORTED_MODULE_12__.BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = ethers__WEBPACK_IMPORTED_MODULE_12__.BigNumber.from(queryParams?.count || _QueryParams_7418efe8_esm_js__WEBPACK_IMPORTED_MODULE_10__.c).toNumber();\n    const firstTokenId = ethers__WEBPACK_IMPORTED_MODULE_12__.BigNumber.from(Math.max((await this.totalClaimedSupply()).toNumber(), start));\n    const maxId = ethers__WEBPACK_IMPORTED_MODULE_12__.BigNumber.from(Math.min((await this.contractWrapper.readContract.nextTokenIdToMint()).toNumber(), firstTokenId.toNumber() + count));\n    return await Promise.all(Array.from(Array(maxId.sub(firstTokenId).toNumber()).keys()).map(i => this.erc721.getTokenMetadata(firstTokenId.add(i).toString())));\n  }\n\n  /**\n   * Get the claimed supply\n   *\n   * @remarks Get the number of claimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTCount = await contract.totalClaimedSupply();\n   * console.log(`NFTs claimed so far: ${claimedNFTCount}`);\n   * ```\n   * @returns the claimed supply\n   */\n  async totalClaimedSupply() {\n    return this.erc721.totalClaimedSupply();\n  }\n\n  /**\n   * Get the unclaimed supply\n   *\n   * @remarks Get the number of unclaimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTCount = await contract.totalUnclaimedSupply();\n   * console.log(`NFTs left to claim: ${unclaimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   */\n  async totalUnclaimedSupply() {\n    return this.erc721.totalUnclaimedSupply();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole((0,_watchTransactions_f696b99b_esm_js__WEBPACK_IMPORTED_MODULE_9__.bq)(\"transfer\"), ethers__WEBPACK_IMPORTED_MODULE_12__.constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress\n   * @param quantity\n   * @param checkERC20Allowance\n   *\n   * @deprecated Use `contract.erc721.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, quantity, options) {\n    return this.erc721.getClaimTransaction(destinationAddress, quantity, options);\n  }\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return _watchTransactions_f696b99b_esm_js__WEBPACK_IMPORTED_MODULE_9__.aU.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n(0,_QueryParams_7418efe8_esm_js__WEBPACK_IMPORTED_MODULE_10__._)(SignatureDrop, \"contractRoles\", [\"admin\", \"minter\", \"transfer\"]);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX2NsaWVudCkvLi4vbm9kZV9tb2R1bGVzL0B0aGlyZHdlYi1kZXYvc2RrL2Rpc3Qvc2lnbmF0dXJlLWRyb3AtZjM3ZjVlN2IuZXNtLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQW1HO0FBQzZkO0FBQ3ZmO0FBQ0E7QUFDM0I7QUFDL0I7QUFDRjtBQUN3RDtBQUNIO0FBQ1Q7QUFDUTtBQUNHO0FBQ0c7QUFDYjtBQUNNO0FBQ0U7QUFDSjtBQUNTO0FBQ0o7QUFDQztBQUNGO0FBQ0E7QUFDUDtBQUNVO0FBQ0o7QUFDSjtBQUNNO0FBQ0s7QUFDRztBQUNQO0FBQ0E7QUFDQztBQUNSO0FBQ007QUFDSztBQUNHO0FBQ2Y7QUFDVTtBQUNGO0FBQ0s7QUFDUDtBQUNQO0FBQ1U7QUFDRjtBQUNDO0FBQ1Q7QUFDTztBQUNGO0FBQ1U7QUFDVjtBQUNBO0FBQ0o7QUFDRDtBQUNRO0FBQ1A7QUFDOUI7QUFDaEI7QUFDWTtBQUNMO0FBQ0U7QUFDc0M7QUFDOUI7QUFDUDtBQUMwQztBQUNyQztBQUNQO0FBQ0c7QUFDWDtBQUM2QztBQUNRO0FBQ0M7QUFDUTtBQUNQO0FBQ1E7QUFDQztBQUN4QztBQUN1QjtBQUNDOztBQUU5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxjQUFjO0FBQzFCO0FBQ0Esa0NBQWtDLFdBQVc7QUFDN0MsNkNBQTZDLGtCQUFrQjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixnRUFBYztBQUMxQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsbURBQWM7QUFDaEMsa0JBQWtCLG1EQUFjLHVCQUF1Qiw0REFBdUI7QUFDOUUseUJBQXlCLG1EQUFjO0FBQ3ZDLGtCQUFrQixtREFBYztBQUNoQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsZ0JBQWdCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLGtCQUFrQjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEUsc0VBQVcsY0FBYywwREFBcUI7QUFDNUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxzRkFBK0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZTs7QUFFVSIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uLi9ub2RlX21vZHVsZXMvQHRoaXJkd2ViLWRldi9zZGsvZGlzdC9zaWduYXR1cmUtZHJvcC1mMzdmNWU3Yi5lc20uanM/ZjgyMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfIGFzIF9kZWZpbmVQcm9wZXJ0eSwgYyBhcyBERUZBVUxUX1FVRVJZX0FMTF9DT1VOVCB9IGZyb20gJy4vUXVlcnlQYXJhbXMtNzQxOGVmZTguZXNtLmpzJztcbmltcG9ydCB7IGRDIGFzIENvbnRyYWN0V3JhcHBlciwgZHUgYXMgYnVpbGRUcmFuc2FjdGlvbkZ1bmN0aW9uLCBlIGFzIEFiaVNjaGVtYSwgYWkgYXMgQ29udHJhY3RNZXRhZGF0YSwgZE0gYXMgRHJvcEVyYzcyMUNvbnRyYWN0U2NoZW1hLCBhVyBhcyBDb250cmFjdEFwcFVSSSwgYWogYXMgQ29udHJhY3RSb2xlcywgYWsgYXMgQ29udHJhY3RSb3lhbHR5LCBhbCBhcyBDb250cmFjdFByaW1hcnlTYWxlLCBhaCBhcyBDb250cmFjdEVuY29kZXIsIGFPIGFzIEdhc0Nvc3RFc3RpbWF0b3IsIGFQIGFzIENvbnRyYWN0RXZlbnRzLCBhUiBhcyBDb250cmFjdFBsYXRmb3JtRmVlLCBhUSBhcyBDb250cmFjdEludGVyY2VwdG9yLCBhbiBhcyBEcm9wQ2xhaW1Db25kaXRpb25zLCBheCBhcyBFcmM3MjFXaXRoUXVhbnRpdHlTaWduYXR1cmVNaW50YWJsZSwgYW0gYXMgRGVsYXllZFJldmVhbCwgZE4gYXMgRkVBVFVSRV9ORlRfUkVWRUFMQUJMRSwgYVQgYXMgQ29udHJhY3RPd25lciwgYnEgYXMgZ2V0Um9sZUhhc2gsIGFVIGFzIFRyYW5zYWN0aW9uIH0gZnJvbSAnLi93YXRjaFRyYW5zYWN0aW9ucy1mNjk2Yjk5Yi5lc20uanMnO1xuaW1wb3J0IHsgUyBhcyBTdGFuZGFyZEVyYzcyMSB9IGZyb20gJy4vZXJjLTcyMS1zdGFuZGFyZC1mMDc2M2RmYS5lc20uanMnO1xuaW1wb3J0IHsgYSBhcyBQYXBlckNoZWNrb3V0IH0gZnJvbSAnLi90aGlyZHdlYi1jaGVja291dC1jZjZhYTRjMS5lc20uanMnO1xuaW1wb3J0IHsgQmlnTnVtYmVyLCBjb25zdGFudHMgfSBmcm9tICdldGhlcnMnO1xuaW1wb3J0ICdibi5qcyc7XG5pbXBvcnQgJ3pvZCc7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JVGhpcmR3ZWJDb250cmFjdC5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lCdXJuYWJsZUVSQzIwLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSURyb3AuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRHJvcEVSQzIwX1YyLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSURyb3BTaW5nbGVQaGFzZS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lEcm9wU2luZ2xlUGhhc2VfVjEuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRVJDMjAuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRVJDMjBQZXJtaXQuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JTWludGFibGVFUkMyMC5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lNdWx0aWNhbGwuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JU2lnbmF0dXJlTWludEVSQzIwLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUJ1cm5hYmxlRVJDNzIxLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUNsYWltYWJsZUVSQzcyMS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lEZWxheWVkUmV2ZWFsLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSURyb3BFUkM3MjFfVjMuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRVJDNzIxLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUVSQzcyMUVudW1lcmFibGUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRVJDNzIxU3VwcGx5Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUxhenlNaW50Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSU1pbnRhYmxlRVJDNzIxLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSVNpZ25hdHVyZU1pbnRFUkM3MjEuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JU2lnbmF0dXJlTWludEVSQzcyMV9WMS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0xhenlNaW50V2l0aFRpZXIuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JQnVybmFibGVFUkMxMTU1Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUNsYWltYWJsZUVSQzExNTUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRHJvcDExNTUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRHJvcEVSQzExNTVfVjIuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRHJvcFNpbmdsZVBoYXNlMTE1NS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lEcm9wU2luZ2xlUGhhc2UxMTU1X1YxLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUVSQzExNTUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRVJDMTE1NUVudW1lcmFibGUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JTWludGFibGVFUkMxMTU1Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSVNpZ25hdHVyZU1pbnRFUkMxMTU1Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvRVJDMjc3MUNvbnRleHQuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JQXBwVVJJLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUNvbnRyYWN0TWV0YWRhdGEuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRGlyZWN0TGlzdGluZ3MuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRW5nbGlzaEF1Y3Rpb25zLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSU9mZmVycy5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lQYWNrVlJGRGlyZWN0Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSVBlcm1pc3Npb25zLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSVBlcm1pc3Npb25zRW51bWVyYWJsZS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lQbGF0Zm9ybUZlZS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lQcmltYXJ5U2FsZS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lSb3lhbHR5Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvT3duYWJsZS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lBY2NvdW50RmFjdG9yeS5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lBY2NvdW50Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NoYWlucyc7XG5pbXBvcnQgJ2JzNTgnO1xuaW1wb3J0ICdldGhlcnMvbGliL3V0aWxzJztcbmltcG9ydCAnY3Jvc3MtZmV0Y2gnO1xuaW1wb3J0ICdldmVudGVtaXR0ZXIzJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0ZvcndhcmRlci5qc29uJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9zdG9yYWdlJztcbmltcG9ydCAndGlueS1pbnZhcmlhbnQnO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSUVSQzIwTWV0YWRhdGEuanNvbic7XG5pbXBvcnQgJ2V0aGVycy9saWIvdXRpbHMuanMnO1xuaW1wb3J0ICdtZXJrbGV0cmVlanMnO1xuaW1wb3J0ICdmYXN0LWRlZXAtZXF1YWwnO1xuaW1wb3J0ICd1dWlkJztcbmltcG9ydCAnQHRoaXJkd2ViLWRldi9jb250cmFjdHMtanMvZGlzdC9hYmlzL0lFUkMxNjUuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRVJDNzIxTWV0YWRhdGEuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9JRVJDMTE1NU1ldGFkYXRhLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvSURlbGF5ZWRSZXZlYWxEZXByZWNhdGVkLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvQ29udHJhY3RQdWJsaXNoZXIuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvY29udHJhY3RzLWpzL2Rpc3QvYWJpcy9UV011bHRpY2hhaW5SZWdpc3RyeUxvZ2ljLmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvVFdNdWx0aWNoYWluUmVnaXN0cnlSb3V0ZXIuanNvbic7XG5pbXBvcnQgJ0B0aGlyZHdlYi1kZXYvZ2VuZXJhdGVkLWFiaXMnO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvVFdGYWN0b3J5Lmpzb24nO1xuaW1wb3J0ICdAdGhpcmR3ZWItZGV2L2NvbnRyYWN0cy1qcy9kaXN0L2FiaXMvVFdSZWdpc3RyeS5qc29uJztcblxuLyoqXG4gKiBTZXR1cCBhIGNvbGxlY3Rpb24gb2YgTkZUcyB3aGVyZSB3aGVuIGl0IGNvbWVzIHRvIG1pbnRpbmcsIHlvdSBjYW4gYXV0aG9yaXplXG4gKiBzb21lIGV4dGVybmFsIHBhcnR5IHRvIG1pbnQgdG9rZW5zIG9uIHlvdXIgY29udHJhY3QsIGFuZCBzcGVjaWZ5IHdoYXQgZXhhY3RseVxuICogd2lsbCBiZSBtaW50ZWQgYnkgdGhhdCBleHRlcm5hbCBwYXJ0eS4uXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBpbXBvcnQgeyBUaGlyZHdlYlNESyB9IGZyb20gXCJAdGhpcmR3ZWItZGV2L3Nka1wiO1xuICpcbiAqIGNvbnN0IHNkayA9IG5ldyBUaGlyZHdlYlNESyhcInt7Y2hhaW5OYW1lfX1cIik7XG4gKiBjb25zdCBjb250cmFjdCA9IGF3YWl0IHNkay5nZXRDb250cmFjdChcInt7Y29udHJhY3RfYWRkcmVzc319XCIsIFwic2lnbmF0dXJlLWRyb3BcIik7XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIFNpZ25hdHVyZURyb3AgZXh0ZW5kcyBTdGFuZGFyZEVyYzcyMSB7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyZSByb3lhbHRpZXNcbiAgICogQHJlbWFya3MgU2V0IHlvdXIgb3duIHJveWFsdGllcyBmb3IgdGhlIGVudGlyZSBjb250cmFjdCBvciBwZXIgdG9rZW5cbiAgICogQGV4YW1wbGVcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiAvLyByb3lhbHRpZXMgb24gdGhlIHdob2xlIGNvbnRyYWN0XG4gICAqIGNvbnRyYWN0LnJveWFsdGllcy5zZXREZWZhdWx0Um95YWx0eUluZm8oe1xuICAgKiAgIHNlbGxlcl9mZWVfYmFzaXNfcG9pbnRzOiAxMDAsIC8vIDElXG4gICAqICAgZmVlX3JlY2lwaWVudDogXCIweC4uLlwiXG4gICAqIH0pO1xuICAgKiAvLyBvdmVycmlkZSByb3lhbHR5IGZvciBhIHBhcnRpY3VsYXIgdG9rZW5cbiAgICogY29udHJhY3Qucm95YWx0aWVzLnNldFRva2VuUm95YWx0eUluZm8odG9rZW5JZCwge1xuICAgKiAgIHNlbGxlcl9mZWVfYmFzaXNfcG9pbnRzOiA1MDAsIC8vIDUlXG4gICAqICAgZmVlX3JlY2lwaWVudDogXCIweC4uLlwiXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyZSBjbGFpbSBjb25kaXRpb25zXG4gICAqIEByZW1hcmtzIERlZmluZSB3aG8gY2FuIGNsYWltIE5GVHMgaW4gdGhlIGNvbGxlY3Rpb24sIHdoZW4gYW5kIGhvdyBtYW55LlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGNvbnN0IHByZXNhbGVTdGFydFRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgKiBjb25zdCBjbGFpbUNvbmRpdGlvbiA9IHtcbiAgICogICAgIHN0YXJ0VGltZTogcHJlc2FsZVN0YXJ0VGltZSwgLy8gc3RhcnQgdGhlIHByZXNhbGUgbm93XG4gICAqICAgICBtYXhDbGFpbWFibGVTdXBwbHk6IDIsIC8vIGxpbWl0IGhvdyBtYW55IG1pbnRzIGZvciB0aGlzIHByZXNhbGVcbiAgICogICAgIHByaWNlOiAwLjAxLCAvLyBwcmVzYWxlIHByaWNlXG4gICAqICAgICBzbmFwc2hvdDogWycweC4uLicsICcweC4uLiddLCAvLyBsaW1pdCBtaW50aW5nIHRvIG9ubHkgY2VydGFpbiBhZGRyZXNzZXNcbiAgICogfTtcbiAgICogYXdhaXQgY29udHJhY3QuY2xhaW1Db25kaXRpb25zLnNldChbY2xhaW1Db25kaXRpb25dKTtcbiAgICogYGBgXG4gICAqL1xuXG4gIC8qKlxuICAgKiBEZWxheWVkIHJldmVhbFxuICAgKiBAcmVtYXJrcyBDcmVhdGUgYSBiYXRjaCBvZiBlbmNyeXB0ZWQgTkZUcyB0aGF0IGNhbiBiZSByZXZlYWxlZCBhdCBhIGxhdGVyIHRpbWUuXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogLy8gdGhlIHJlYWwgTkZUcywgdGhlc2Ugd2lsbCBiZSBlbmNyeXB0ZWQgdW50aWwgeW91IHJldmVhbCB0aGVtXG4gICAqIGNvbnN0IHJlYWxORlRzID0gW3tcbiAgICogICBuYW1lOiBcIkNvbW1vbiBORlQgIzFcIixcbiAgICogICBkZXNjcmlwdGlvbjogXCJDb21tb24gTkZULCBvbmUgb2YgbWFueS5cIixcbiAgICogICBpbWFnZTogZnMucmVhZEZpbGVTeW5jKFwicGF0aC90by9pbWFnZS5wbmdcIiksXG4gICAqIH0sIHtcbiAgICogICBuYW1lOiBcIlN1cGVyIFJhcmUgTkZUICMyXCIsXG4gICAqICAgZGVzY3JpcHRpb246IFwiWW91IGdvdCBhIFN1cGVyIFJhcmUgTkZUIVwiLFxuICAgKiAgIGltYWdlOiBmcy5yZWFkRmlsZVN5bmMoXCJwYXRoL3RvL2ltYWdlLnBuZ1wiKSxcbiAgICogfV07XG4gICAqIC8vIEEgcGxhY2Vob2xkZXIgTkZUIHRoYXQgcGVvcGxlIHdpbGwgZ2V0IGltbWVkaWF0ZWx5IGluIHRoZWlyIHdhbGxldCwgYW5kIHdpbGwgYmUgY29udmVydGVkIHRvIHRoZSByZWFsIE5GVCBhdCByZXZlYWwgdGltZVxuICAgKiBjb25zdCBwbGFjZWhvbGRlck5GVCA9IHtcbiAgICogICBuYW1lOiBcIkhpZGRlbiBORlRcIixcbiAgICogICBkZXNjcmlwdGlvbjogXCJXaWxsIGJlIHJldmVhbGVkIG5leHQgd2VlayFcIlxuICAgKiB9O1xuICAgKiAvLyBDcmVhdGUgYW5kIGVuY3J5cHQgdGhlIE5GVHNcbiAgICogYXdhaXQgY29udHJhY3QucmV2ZWFsZXIuY3JlYXRlRGVsYXllZFJldmVhbEJhdGNoKFxuICAgKiAgIHBsYWNlaG9sZGVyTkZULFxuICAgKiAgIHJlYWxORlRzLFxuICAgKiAgIFwibXkgc2VjcmV0IHBhc3N3b3JkXCIsXG4gICAqICk7XG4gICAqIC8vIFdoZW5ldmVyIHlvdSdyZSByZWFkeSwgcmV2ZWFsIHlvdXIgTkZUcyBhdCBhbnkgdGltZVxuICAgKiBjb25zdCBiYXRjaElkID0gMDsgLy8gdGhlIGJhdGNoIHRvIHJldmVhbFxuICAgKiBhd2FpdCBjb250cmFjdC5yZXZlYWxlci5yZXZlYWwoYmF0Y2hJZCwgXCJteSBzZWNyZXQgcGFzc3dvcmRcIik7XG4gICAqIGBgYFxuICAgKi9cblxuICAvKipcbiAgICogU2lnbmF0dXJlIE1pbnRpbmdcbiAgICogQHJlbWFya3MgR2VuZXJhdGUgZHluYW1pYyBORlRzIHdpdGggeW91ciBvd24gc2lnbmF0dXJlLCBhbmQgbGV0IG90aGVycyBtaW50IHRoZW0gdXNpbmcgdGhhdCBzaWduYXR1cmUuXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogLy8gc2VlIGhvdyB0byBjcmFmdCBhIHBheWxvYWQgdG8gc2lnbiBpbiB0aGUgYGNvbnRyYWN0LnNpZ25hdHVyZS5nZW5lcmF0ZSgpYCBkb2N1bWVudGF0aW9uXG4gICAqIGNvbnN0IHNpZ25lZFBheWxvYWQgPSBjb250cmFjdC5zaWduYXR1cmUuZ2VuZXJhdGUocGF5bG9hZCk7XG4gICAqXG4gICAqIC8vIG5vdyBhbnlvbmUgY2FuIG1pbnQgdGhlIE5GVFxuICAgKiBjb25zdCB0eCA9IGNvbnRyYWN0LnNpZ25hdHVyZS5taW50KHNpZ25lZFBheWxvYWQpO1xuICAgKiBjb25zdCByZWNlaXB0ID0gdHgucmVjZWlwdDsgLy8gdGhlIG1pbnQgdHJhbnNhY3Rpb24gcmVjZWlwdFxuICAgKiBjb25zdCBtaW50ZWRJZCA9IHR4LmlkOyAvLyB0aGUgaWQgb2YgdGhlIE5GVCBtaW50ZWRcbiAgICogYGBgXG4gICAqL1xuXG4gIC8qKlxuICAgKiBDaGVja291dFxuICAgKiBAcmVtYXJrcyBDcmVhdGUgYSBGSUFUIGN1cnJlbmN5IGNoZWNrb3V0IGZvciB5b3VyIE5GVCBkcm9wLlxuICAgKi9cblxuICBjb25zdHJ1Y3RvcihuZXR3b3JrLCBhZGRyZXNzLCBzdG9yYWdlKSB7XG4gICAgbGV0IF9vcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fTtcbiAgICBsZXQgYWJpID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgPyBhcmd1bWVudHNbNF0gOiB1bmRlZmluZWQ7XG4gICAgbGV0IGNoYWluSWQgPSBhcmd1bWVudHMubGVuZ3RoID4gNSA/IGFyZ3VtZW50c1s1XSA6IHVuZGVmaW5lZDtcbiAgICBsZXQgY29udHJhY3RXcmFwcGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDYgJiYgYXJndW1lbnRzWzZdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNl0gOiBuZXcgQ29udHJhY3RXcmFwcGVyKG5ldHdvcmssIGFkZHJlc3MsIGFiaSwgX29wdGlvbnMpO1xuICAgIHN1cGVyKGNvbnRyYWN0V3JhcHBlciwgc3RvcmFnZSwgY2hhaW5JZCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiYWJpXCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwib3duZXJcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJlbmNvZGVyXCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiZXN0aW1hdG9yXCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwibWV0YWRhdGFcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJhcHBcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJzYWxlc1wiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInBsYXRmb3JtRmVlc1wiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImV2ZW50c1wiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJvbGVzXCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiaW50ZXJjZXB0b3JcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJyb3lhbHRpZXNcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJjbGFpbUNvbmRpdGlvbnNcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJyZXZlYWxlclwiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInNpZ25hdHVyZVwiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNoZWNrb3V0XCIsIHZvaWQgMCk7XG4gICAgLyoqICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICAqIFdSSVRFIEZVTkNUSU9OU1xuICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGJhdGNoIG9mIHVuaXF1ZSBORlRzIHRvIGJlIGNsYWltZWQgaW4gdGhlIGZ1dHVyZVxuICAgICAqXG4gICAgICogQHJlbWFya3MgQ3JlYXRlIGJhdGNoIGFsbG93cyB5b3UgdG8gY3JlYXRlIGEgYmF0Y2ggb2YgbWFueSB1bmlxdWUgTkZUcyBpbiBvbmUgdHJhbnNhY3Rpb24uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGphdmFzY3JpcHRcbiAgICAgKiAvLyBDdXN0b20gbWV0YWRhdGEgb2YgdGhlIE5GVHMgdG8gY3JlYXRlXG4gICAgICogY29uc3QgbWV0YWRhdGFzID0gW3tcbiAgICAgKiAgIG5hbWU6IFwiQ29vbCBORlRcIixcbiAgICAgKiAgIGRlc2NyaXB0aW9uOiBcIlRoaXMgaXMgYSBjb29sIE5GVFwiLFxuICAgICAqICAgaW1hZ2U6IGZzLnJlYWRGaWxlU3luYyhcInBhdGgvdG8vaW1hZ2UucG5nXCIpLCAvLyBUaGlzIGNhbiBiZSBhbiBpbWFnZSB1cmwgb3IgZmlsZVxuICAgICAqIH0sIHtcbiAgICAgKiAgIG5hbWU6IFwiQ29vbCBORlRcIixcbiAgICAgKiAgIGRlc2NyaXB0aW9uOiBcIlRoaXMgaXMgYSBjb29sIE5GVFwiLFxuICAgICAqICAgaW1hZ2U6IGZzLnJlYWRGaWxlU3luYyhcInBhdGgvdG8vaW1hZ2UucG5nXCIpLFxuICAgICAqIH1dO1xuICAgICAqXG4gICAgICogY29uc3QgcmVzdWx0cyA9IGF3YWl0IGNvbnRyYWN0LmNyZWF0ZUJhdGNoKG1ldGFkYXRhcyk7IC8vIHVwbG9hZHMgYW5kIGNyZWF0ZXMgdGhlIE5GVHMgb24gY2hhaW5cbiAgICAgKiBjb25zdCBmaXJzdFRva2VuSWQgPSByZXN1bHRzWzBdLmlkOyAvLyB0b2tlbiBpZCBvZiB0aGUgZmlyc3QgY3JlYXRlZCBORlRcbiAgICAgKiBjb25zdCBmaXJzdE5GVCA9IGF3YWl0IHJlc3VsdHNbMF0uZGF0YSgpOyAvLyAob3B0aW9uYWwpIGZldGNoIGRldGFpbHMgb2YgdGhlIGZpcnN0IGNyZWF0ZWQgTkZUXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWV0YWRhdGFzIC0gVGhlIG1ldGFkYXRhIHRvIGluY2x1ZGUgaW4gdGhlIGJhdGNoLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gb3B0aW9uYWwgdXBsb2FkIHByb2dyZXNzIGNhbGxiYWNrXG4gICAgICovXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiY3JlYXRlQmF0Y2hcIiwgYnVpbGRUcmFuc2FjdGlvbkZ1bmN0aW9uKGFzeW5jIChtZXRhZGF0YXMsIG9wdGlvbnMpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmVyYzcyMS5sYXp5TWludC5wcmVwYXJlKG1ldGFkYXRhcywgb3B0aW9ucyk7XG4gICAgfSkpO1xuICAgIC8qKlxuICAgICAqIENsYWltIHVuaXF1ZSBORlRzIHRvIGEgc3BlY2lmaWMgV2FsbGV0XG4gICAgICpcbiAgICAgKiBAcmVtYXJrcyBMZXQgdGhlIHNwZWNpZmllZCB3YWxsZXQgY2xhaW0gTkZUcy5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgamF2YXNjcmlwdFxuICAgICAqIGNvbnN0IGFkZHJlc3MgPSBcInt7d2FsbGV0X2FkZHJlc3N9fVwiOyAvLyBhZGRyZXNzIG9mIHRoZSB3YWxsZXQgeW91IHdhbnQgdG8gY2xhaW0gdGhlIE5GVHNcbiAgICAgKiBjb25zdCBxdWFudGl0eSA9IDE7IC8vIGhvdyBtYW55IHVuaXF1ZSBORlRzIHlvdSB3YW50IHRvIGNsYWltXG4gICAgICpcbiAgICAgKiBjb25zdCB0eCA9IGF3YWl0IGNvbnRyYWN0LmNsYWltVG8oYWRkcmVzcywgcXVhbnRpdHkpO1xuICAgICAqIGNvbnN0IHJlY2VpcHQgPSB0eC5yZWNlaXB0OyAvLyB0aGUgdHJhbnNhY3Rpb24gcmVjZWlwdFxuICAgICAqIGNvbnN0IGNsYWltZWRUb2tlbklkID0gdHguaWQ7IC8vIHRoZSBpZCBvZiB0aGUgTkZUIGNsYWltZWRcbiAgICAgKiBjb25zdCBjbGFpbWVkTkZUID0gYXdhaXQgdHguZGF0YSgpOyAvLyAob3B0aW9uYWwpIGdldCB0aGUgY2xhaW1lZCBORlQgbWV0YWRhdGFcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBkZXN0aW5hdGlvbkFkZHJlc3MgLSBBZGRyZXNzIHlvdSB3YW50IHRvIHNlbmQgdGhlIHRva2VuIHRvXG4gICAgICogQHBhcmFtIHF1YW50aXR5IC0gUXVhbnRpdHkgb2YgdGhlIHRva2VucyB5b3Ugd2FudCB0byBjbGFpbVxuICAgICAqIEBwYXJhbSBjaGVja0VSQzIwQWxsb3dhbmNlIC0gT3B0aW9uYWwsIGNoZWNrIGlmIHRoZSB3YWxsZXQgaGFzIGVub3VnaCBFUkMyMCBhbGxvd2FuY2UgdG8gY2xhaW0gdGhlIHRva2VucywgYW5kIGlmIG5vdCwgYXBwcm92ZSB0aGUgdHJhbnNmZXJcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIC0gYW4gYXJyYXkgb2YgcmVzdWx0cyBjb250YWluaW5nIHRoZSBpZCBvZiB0aGUgdG9rZW4gY2xhaW1lZCwgdGhlIHRyYW5zYWN0aW9uIHJlY2VpcHQgYW5kIGEgcHJvbWlzZSB0byBvcHRpb25hbGx5IGZldGNoIHRoZSBuZnQgbWV0YWRhdGFcbiAgICAgKi9cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJjbGFpbVRvXCIsIGJ1aWxkVHJhbnNhY3Rpb25GdW5jdGlvbihhc3luYyAoZGVzdGluYXRpb25BZGRyZXNzLCBxdWFudGl0eSwgb3B0aW9ucykgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuZXJjNzIxLmNsYWltVG8ucHJlcGFyZShkZXN0aW5hdGlvbkFkZHJlc3MsIHF1YW50aXR5LCBvcHRpb25zKTtcbiAgICB9KSk7XG4gICAgLyoqXG4gICAgICogQ2xhaW0gTkZUcyB0byB0aGUgY29ubmVjdGVkIHdhbGxldC5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzIFNlZSB7QGxpbmsgTkZURHJvcC5jbGFpbVRvfVxuICAgICAqXG4gICAgICogQHJldHVybnMgLSBhbiBhcnJheSBvZiByZXN1bHRzIGNvbnRhaW5pbmcgdGhlIGlkIG9mIHRoZSB0b2tlbiBjbGFpbWVkLCB0aGUgdHJhbnNhY3Rpb24gcmVjZWlwdCBhbmQgYSBwcm9taXNlIHRvIG9wdGlvbmFsbHkgZmV0Y2ggdGhlIG5mdCBtZXRhZGF0YVxuICAgICAqL1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNsYWltXCIsIGJ1aWxkVHJhbnNhY3Rpb25GdW5jdGlvbihhc3luYyAocXVhbnRpdHksIG9wdGlvbnMpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmVyYzcyMS5jbGFpbS5wcmVwYXJlKHF1YW50aXR5LCBvcHRpb25zKTtcbiAgICB9KSk7XG4gICAgLyoqXG4gICAgICogQnVybiBhIHNpbmdsZSBORlRcbiAgICAgKiBAcGFyYW0gdG9rZW5JZCAtIHRoZSB0b2tlbiBJZCB0byBidXJuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBqYXZhc2NyaXB0XG4gICAgICogY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udHJhY3QuYnVyblRva2VuKHRva2VuSWQpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImJ1cm5cIiwgYnVpbGRUcmFuc2FjdGlvbkZ1bmN0aW9uKGFzeW5jIHRva2VuSWQgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuZXJjNzIxLmJ1cm4ucHJlcGFyZSh0b2tlbklkKTtcbiAgICB9KSk7XG4gICAgdGhpcy5hYmkgPSBBYmlTY2hlbWEucGFyc2UoYWJpIHx8IFtdKTtcbiAgICB0aGlzLm1ldGFkYXRhID0gbmV3IENvbnRyYWN0TWV0YWRhdGEodGhpcy5jb250cmFjdFdyYXBwZXIsIERyb3BFcmM3MjFDb250cmFjdFNjaGVtYSwgdGhpcy5zdG9yYWdlKTtcbiAgICB0aGlzLmFwcCA9IG5ldyBDb250cmFjdEFwcFVSSSh0aGlzLmNvbnRyYWN0V3JhcHBlciwgdGhpcy5tZXRhZGF0YSwgdGhpcy5zdG9yYWdlKTtcbiAgICB0aGlzLnJvbGVzID0gbmV3IENvbnRyYWN0Um9sZXModGhpcy5jb250cmFjdFdyYXBwZXIsIFNpZ25hdHVyZURyb3AuY29udHJhY3RSb2xlcyk7XG4gICAgdGhpcy5yb3lhbHRpZXMgPSBuZXcgQ29udHJhY3RSb3lhbHR5KHRoaXMuY29udHJhY3RXcmFwcGVyLCB0aGlzLm1ldGFkYXRhKTtcbiAgICB0aGlzLnNhbGVzID0gbmV3IENvbnRyYWN0UHJpbWFyeVNhbGUodGhpcy5jb250cmFjdFdyYXBwZXIpO1xuICAgIHRoaXMuZW5jb2RlciA9IG5ldyBDb250cmFjdEVuY29kZXIodGhpcy5jb250cmFjdFdyYXBwZXIpO1xuICAgIHRoaXMuZXN0aW1hdG9yID0gbmV3IEdhc0Nvc3RFc3RpbWF0b3IodGhpcy5jb250cmFjdFdyYXBwZXIpO1xuICAgIHRoaXMuZXZlbnRzID0gbmV3IENvbnRyYWN0RXZlbnRzKHRoaXMuY29udHJhY3RXcmFwcGVyKTtcbiAgICB0aGlzLnBsYXRmb3JtRmVlcyA9IG5ldyBDb250cmFjdFBsYXRmb3JtRmVlKHRoaXMuY29udHJhY3RXcmFwcGVyKTtcbiAgICB0aGlzLmludGVyY2VwdG9yID0gbmV3IENvbnRyYWN0SW50ZXJjZXB0b3IodGhpcy5jb250cmFjdFdyYXBwZXIpO1xuICAgIHRoaXMuY2xhaW1Db25kaXRpb25zID0gbmV3IERyb3BDbGFpbUNvbmRpdGlvbnModGhpcy5jb250cmFjdFdyYXBwZXIsIHRoaXMubWV0YWRhdGEsIHRoaXMuc3RvcmFnZSk7XG4gICAgdGhpcy5zaWduYXR1cmUgPSBuZXcgRXJjNzIxV2l0aFF1YW50aXR5U2lnbmF0dXJlTWludGFibGUodGhpcy5jb250cmFjdFdyYXBwZXIsIHRoaXMuc3RvcmFnZSk7XG4gICAgdGhpcy5yZXZlYWxlciA9IG5ldyBEZWxheWVkUmV2ZWFsKHRoaXMuY29udHJhY3RXcmFwcGVyLCB0aGlzLnN0b3JhZ2UsIEZFQVRVUkVfTkZUX1JFVkVBTEFCTEUubmFtZSwgKCkgPT4gdGhpcy5lcmM3MjEubmV4dFRva2VuSWRUb01pbnQoKSk7XG4gICAgdGhpcy5zaWduYXR1cmUgPSBuZXcgRXJjNzIxV2l0aFF1YW50aXR5U2lnbmF0dXJlTWludGFibGUodGhpcy5jb250cmFjdFdyYXBwZXIsIHRoaXMuc3RvcmFnZSk7XG4gICAgdGhpcy5vd25lciA9IG5ldyBDb250cmFjdE93bmVyKHRoaXMuY29udHJhY3RXcmFwcGVyKTtcbiAgICB0aGlzLmNoZWNrb3V0ID0gbmV3IFBhcGVyQ2hlY2tvdXQodGhpcy5jb250cmFjdFdyYXBwZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgb25OZXR3b3JrVXBkYXRlZChuZXR3b3JrKSB7XG4gICAgdGhpcy5jb250cmFjdFdyYXBwZXIudXBkYXRlU2lnbmVyT3JQcm92aWRlcihuZXR3b3JrKTtcbiAgfVxuICBnZXRBZGRyZXNzKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRyYWN0V3JhcHBlci5yZWFkQ29udHJhY3QuYWRkcmVzcztcbiAgfVxuXG4gIC8qKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICogUkVBRCBGVU5DVElPTlNcbiAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgdG90YWwgY291bnQgTkZUcyBpbiB0aGlzIGRyb3AgY29udHJhY3QsIGJvdGggY2xhaW1lZCBhbmQgdW5jbGFpbWVkXG4gICAqL1xuICBhc3luYyB0b3RhbFN1cHBseSgpIHtcbiAgICBjb25zdCBjbGFpbWVkID0gYXdhaXQgdGhpcy50b3RhbENsYWltZWRTdXBwbHkoKTtcbiAgICBjb25zdCB1bmNsYWltZWQgPSBhd2FpdCB0aGlzLnRvdGFsVW5jbGFpbWVkU3VwcGx5KCk7XG4gICAgcmV0dXJuIGNsYWltZWQuYWRkKHVuY2xhaW1lZCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IEFsbCBDbGFpbWVkIE5GVHNcbiAgICpcbiAgICogQHJlbWFya3MgRmV0Y2ggYWxsIHRoZSBORlRzIChhbmQgdGhlaXIgb3duZXJzKSB0aGF0IGhhdmUgYmVlbiBjbGFpbWVkIGluIHRoaXMgRHJvcC5cbiAgICpcbiAgICogKiBAZXhhbXBsZVxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGNvbnN0IGNsYWltZWRORlRzID0gYXdhaXQgY29udHJhY3QuZ2V0QWxsQ2xhaW1lZCgpO1xuICAgKiBjb25zdCBmaXJzdE93bmVyID0gY2xhaW1lZE5GVHNbMF0ub3duZXI7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gcXVlcnlQYXJhbXMgLSBvcHRpb25hbCBmaWx0ZXJpbmcgdG8gb25seSBmZXRjaCBhIHN1YnNldCBvZiByZXN1bHRzLlxuICAgKiBAcmV0dXJucyBUaGUgTkZUIG1ldGFkYXRhIGFuZCB0aGVpciBvd25lcnNmb3IgYWxsIE5GVHMgcXVlcmllZC5cbiAgICovXG4gIGFzeW5jIGdldEFsbENsYWltZWQocXVlcnlQYXJhbXMpIHtcbiAgICBjb25zdCBzdGFydCA9IEJpZ051bWJlci5mcm9tKHF1ZXJ5UGFyYW1zPy5zdGFydCB8fCAwKS50b051bWJlcigpO1xuICAgIGNvbnN0IGNvdW50ID0gQmlnTnVtYmVyLmZyb20ocXVlcnlQYXJhbXM/LmNvdW50IHx8IERFRkFVTFRfUVVFUllfQUxMX0NPVU5UKS50b051bWJlcigpO1xuICAgIGNvbnN0IG1heElkID0gTWF0aC5taW4oKGF3YWl0IHRoaXMudG90YWxDbGFpbWVkU3VwcGx5KCkpLnRvTnVtYmVyKCksIHN0YXJ0ICsgY291bnQpO1xuICAgIHJldHVybiBhd2FpdCBQcm9taXNlLmFsbChBcnJheS5mcm9tKEFycmF5KG1heElkKS5rZXlzKCkpLm1hcChpID0+IHRoaXMuZ2V0KGkudG9TdHJpbmcoKSkpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgQWxsIFVuY2xhaW1lZCBORlRzXG4gICAqXG4gICAqIEByZW1hcmtzIEZldGNoIGFsbCB0aGUgTkZUcyB0aGF0IGhhdmUgYmVlbiBub3QgYmVlbiBjbGFpbWVkIHlldCBpbiB0aGlzIERyb3AuXG4gICAqXG4gICAqICogQGV4YW1wbGVcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiBjb25zdCB1bmNsYWltZWRORlRzID0gYXdhaXQgY29udHJhY3QuZ2V0QWxsVW5jbGFpbWVkKCk7XG4gICAqIGNvbnN0IGZpcnN0VW5jbGFpbWVkTkZUID0gdW5jbGFpbWVkTkZUc1swXS5uYW1lO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHF1ZXJ5UGFyYW1zIC0gb3B0aW9uYWwgZmlsdGVyaW5nIHRvIG9ubHkgZmV0Y2ggYSBzdWJzZXQgb2YgcmVzdWx0cy5cbiAgICogQHJldHVybnMgVGhlIE5GVCBtZXRhZGF0YSBmb3IgYWxsIE5GVHMgcXVlcmllZC5cbiAgICovXG4gIGFzeW5jIGdldEFsbFVuY2xhaW1lZChxdWVyeVBhcmFtcykge1xuICAgIGNvbnN0IHN0YXJ0ID0gQmlnTnVtYmVyLmZyb20ocXVlcnlQYXJhbXM/LnN0YXJ0IHx8IDApLnRvTnVtYmVyKCk7XG4gICAgY29uc3QgY291bnQgPSBCaWdOdW1iZXIuZnJvbShxdWVyeVBhcmFtcz8uY291bnQgfHwgREVGQVVMVF9RVUVSWV9BTExfQ09VTlQpLnRvTnVtYmVyKCk7XG4gICAgY29uc3QgZmlyc3RUb2tlbklkID0gQmlnTnVtYmVyLmZyb20oTWF0aC5tYXgoKGF3YWl0IHRoaXMudG90YWxDbGFpbWVkU3VwcGx5KCkpLnRvTnVtYmVyKCksIHN0YXJ0KSk7XG4gICAgY29uc3QgbWF4SWQgPSBCaWdOdW1iZXIuZnJvbShNYXRoLm1pbigoYXdhaXQgdGhpcy5jb250cmFjdFdyYXBwZXIucmVhZENvbnRyYWN0Lm5leHRUb2tlbklkVG9NaW50KCkpLnRvTnVtYmVyKCksIGZpcnN0VG9rZW5JZC50b051bWJlcigpICsgY291bnQpKTtcbiAgICByZXR1cm4gYXdhaXQgUHJvbWlzZS5hbGwoQXJyYXkuZnJvbShBcnJheShtYXhJZC5zdWIoZmlyc3RUb2tlbklkKS50b051bWJlcigpKS5rZXlzKCkpLm1hcChpID0+IHRoaXMuZXJjNzIxLmdldFRva2VuTWV0YWRhdGEoZmlyc3RUb2tlbklkLmFkZChpKS50b1N0cmluZygpKSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgY2xhaW1lZCBzdXBwbHlcbiAgICpcbiAgICogQHJlbWFya3MgR2V0IHRoZSBudW1iZXIgb2YgY2xhaW1lZCBORlRzIGluIHRoaXMgRHJvcC5cbiAgICpcbiAgICogKiBAZXhhbXBsZVxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGNvbnN0IGNsYWltZWRORlRDb3VudCA9IGF3YWl0IGNvbnRyYWN0LnRvdGFsQ2xhaW1lZFN1cHBseSgpO1xuICAgKiBjb25zb2xlLmxvZyhgTkZUcyBjbGFpbWVkIHNvIGZhcjogJHtjbGFpbWVkTkZUQ291bnR9YCk7XG4gICAqIGBgYFxuICAgKiBAcmV0dXJucyB0aGUgY2xhaW1lZCBzdXBwbHlcbiAgICovXG4gIGFzeW5jIHRvdGFsQ2xhaW1lZFN1cHBseSgpIHtcbiAgICByZXR1cm4gdGhpcy5lcmM3MjEudG90YWxDbGFpbWVkU3VwcGx5KCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSB1bmNsYWltZWQgc3VwcGx5XG4gICAqXG4gICAqIEByZW1hcmtzIEdldCB0aGUgbnVtYmVyIG9mIHVuY2xhaW1lZCBORlRzIGluIHRoaXMgRHJvcC5cbiAgICpcbiAgICogKiBAZXhhbXBsZVxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGNvbnN0IHVuY2xhaW1lZE5GVENvdW50ID0gYXdhaXQgY29udHJhY3QudG90YWxVbmNsYWltZWRTdXBwbHkoKTtcbiAgICogY29uc29sZS5sb2coYE5GVHMgbGVmdCB0byBjbGFpbTogJHt1bmNsYWltZWRORlRDb3VudH1gKTtcbiAgICogYGBgXG4gICAqIEByZXR1cm5zIHRoZSB1bmNsYWltZWQgc3VwcGx5XG4gICAqL1xuICBhc3luYyB0b3RhbFVuY2xhaW1lZFN1cHBseSgpIHtcbiAgICByZXR1cm4gdGhpcy5lcmM3MjEudG90YWxVbmNsYWltZWRTdXBwbHkoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgd2hldGhlciB1c2VycyBjYW4gdHJhbnNmZXIgTkZUcyBmcm9tIHRoaXMgY29udHJhY3RcbiAgICovXG4gIGFzeW5jIGlzVHJhbnNmZXJSZXN0cmljdGVkKCkge1xuICAgIGNvbnN0IGFueW9uZUNhblRyYW5zZmVyID0gYXdhaXQgdGhpcy5jb250cmFjdFdyYXBwZXIucmVhZENvbnRyYWN0Lmhhc1JvbGUoZ2V0Um9sZUhhc2goXCJ0cmFuc2ZlclwiKSwgY29uc3RhbnRzLkFkZHJlc3NaZXJvKTtcbiAgICByZXR1cm4gIWFueW9uZUNhblRyYW5zZmVyO1xuICB9XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBjbGFpbSB0cmFuc2FjdGlvbiB3aXRob3V0IGV4ZWN1dGluZyBpdC5cbiAgICogVGhpcyBpcyB1c2VmdWwgZm9yIGVzdGltYXRpbmcgdGhlIGdhcyBjb3N0IG9mIGEgY2xhaW0gdHJhbnNhY3Rpb24sIG92ZXJyaWRpbmcgdHJhbnNhY3Rpb24gb3B0aW9ucyBhbmQgaGF2aW5nIGZpbmUgZ3JhaW5lZCBjb250cm9sIG92ZXIgdGhlIHRyYW5zYWN0aW9uIGV4ZWN1dGlvbi5cbiAgICogQHBhcmFtIGRlc3RpbmF0aW9uQWRkcmVzc1xuICAgKiBAcGFyYW0gcXVhbnRpdHlcbiAgICogQHBhcmFtIGNoZWNrRVJDMjBBbGxvd2FuY2VcbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBjb250cmFjdC5lcmM3MjEuY2xhaW0ucHJlcGFyZSguLi5hcmdzKWAgaW5zdGVhZFxuICAgKi9cbiAgYXN5bmMgZ2V0Q2xhaW1UcmFuc2FjdGlvbihkZXN0aW5hdGlvbkFkZHJlc3MsIHF1YW50aXR5LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuZXJjNzIxLmdldENsYWltVHJhbnNhY3Rpb24oZGVzdGluYXRpb25BZGRyZXNzLCBxdWFudGl0eSwgb3B0aW9ucyk7XG4gIH1cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgYXN5bmMgcHJlcGFyZShtZXRob2QsIGFyZ3MsIG92ZXJyaWRlcykge1xuICAgIHJldHVybiBUcmFuc2FjdGlvbi5mcm9tQ29udHJhY3RXcmFwcGVyKHtcbiAgICAgIGNvbnRyYWN0V3JhcHBlcjogdGhpcy5jb250cmFjdFdyYXBwZXIsXG4gICAgICBtZXRob2QsXG4gICAgICBhcmdzLFxuICAgICAgb3ZlcnJpZGVzXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBhc3luYyBjYWxsKGZ1bmN0aW9uTmFtZSwgYXJncywgb3ZlcnJpZGVzKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udHJhY3RXcmFwcGVyLmNhbGwoZnVuY3Rpb25OYW1lLCBhcmdzLCBvdmVycmlkZXMpO1xuICB9XG59XG5fZGVmaW5lUHJvcGVydHkoU2lnbmF0dXJlRHJvcCwgXCJjb250cmFjdFJvbGVzXCIsIFtcImFkbWluXCIsIFwibWludGVyXCIsIFwidHJhbnNmZXJcIl0pO1xuXG5leHBvcnQgeyBTaWduYXR1cmVEcm9wIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(sc_client)/../node_modules/@thirdweb-dev/sdk/dist/signature-drop-f37f5e7b.esm.js\n");

/***/ })

};
;